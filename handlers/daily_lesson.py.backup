import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from datetime import datetime

async def daily_lesson_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_sessions = context.bot_data['user_sessions']
    user_id = update.effective_user.id
    
    # Prevent duplicate lesson generation
    if user_id in user_sessions:
        return
    
    user = db.get_user(user_id)
    
    if not user:
        await update.message.reply_text("Please /start first.")
        return
    
    user_data = user.get('fields', {})
    learning_status = user_data.get('Learning Status', '')
    
    if learning_status != 'In Progress':
        await update.message.reply_text("Please complete onboarding and start your study plan first.")
        return
    
    current_day = int(user_data.get('Current Day', '1'))
    lang = user_data.get('Language', 'en')
    
    # Check if user completed 14-day program
    if current_day > 14:
        lessons_completed = user_data.get('Lessons Completed', '0')
        test_score = user_data.get('Test Score', '0')
        
        msg_uz = f"🎉 Tabriklaymiz! 14 kunlik dasturni yakunladingiz!\n\n📊 Statistika:\n• Darslar: {lessons_completed}\n• Boshlang'ich ball: {test_score}%\n\n🏆 DTM imtihoniga tayyorsiz!\n\nOmad yor bo'lsin! 🚀"
        msg_en = f"🎉 Congratulations! You've completed the 14-day program!\n\n📊 Stats:\n• Lessons: {lessons_completed}\n• Initial Score: {test_score}%\n\n🏆 You're ready for DTM exam!\n\nGood luck! 🚀"
        
        await update.message.reply_text(msg_uz + "\n\n" + msg_en)
        return
    
    weak_topics = user_data.get('Weak Topics', '').split(', ') if user_data.get('Weak Topics') else []
    
    all_topics = weak_topics + ['Algebra', 'Geometry', 'Functions', 'Trigonometry', 'Logarithms', 'Equations', 'Inequalities', 'Sequences', 'Probability', 'Statistics', 'Derivatives', 'Integrals', 'Vectors', 'Complex Numbers']
    topic = all_topics[current_day - 1] if current_day <= len(all_topics) else 'Review'
    
    msg = f"⏳ Generating Day {current_day} lesson: {topic}..." if lang == 'en' else f"⏳ {current_day}-kun darsi tayyorlanmoqda: {topic}..."
    await update.message.reply_text(msg)
    
    from ai_content import AIContentGenerator
    ai = AIContentGenerator()
    
    try:
        user_level = user_data.get('Level', 'Beginner')
        course = db.get_course(topic, user_level, lang)
        
        course_id = ""
        if course:
            theory = course.get('fields', {}).get('Theory Content', '')
            course_id = str(course.get('fields', {}).get('Course ID', ''))
        else:
            theory = ai.generate_theory_explanation(topic, lang)
        
        questions = ai.generate_practice_questions(topic, lang, count=5)
        
        # Validate questions before proceeding
        if not questions:
            await update.message.reply_text("Error: Could not generate questions. Please try again.")
            return
        
        if len(questions) < 5:
            await update.message.reply_text(f"Error: Only generated {len(questions)} questions. Please try again.")
            return
        
        # Validate each question has required fields
        for i, q in enumerate(questions):
            if not all(key in q for key in ['text', 'options', 'correct']):
                await update.message.reply_text(f"Error: Invalid question format. Please try again.")
                return
            if len(q.get('options', [])) != 4:
                await update.message.reply_text(f"Error: Question {i+1} missing options. Please try again.")
                return
        
        tasks = [f"{q['text']}\nA) {q['options'][0]}\nB) {q['options'][1]}\nC) {q['options'][2]}\nD) {q['options'][3]}" for q in questions]
        
        # Save practice questions to Quizzes table AFTER validation
        practice_session_id = db.create_quiz_session(user_id, questions, lesson_day=current_day)
        
        if not practice_session_id:
            await update.message.reply_text("Error: Could not create quiz session. Please try again.")
            return
        
        lesson_data = {
            "fields": {
                "User ID": str(user_id),
                "Day": str(current_day),
                "Topic": topic,
                "Theory Summary": theory[:1000],
                "Task 1": tasks[0][:1000] if len(tasks) > 0 else "",
                "Task 2": tasks[1][:1000] if len(tasks) > 1 else "",
                "Task 3": tasks[2][:1000] if len(tasks) > 2 else "",
                "Task 4": tasks[3][:1000] if len(tasks) > 3 else "",
                "Task 5": tasks[4][:1000] if len(tasks) > 4 else "",
                "Lesson Status": "In Progress",
                "Expected Task": "task_1",
                "Current Task Index": "1",
                "Lesson Start Time": datetime.now().isoformat()
            }
        }
        
        # Add Course ID if available
        if course_id:
            lesson_data["fields"]["Lesson ID"] = f"lesson_day{current_day}_course{course_id}_user{user_id}"
        
        response = requests.post(
            f"https://api.airtable.com/v0/{db.base_id}/tblInFtIh5fZt59g4",
            headers=db.headers,
            json=lesson_data
        )
        
        created_record = response.json()
        lesson_record_id = created_record.get('id')
        
        # Update Users table with Active Lesson ID
        if user:
            db.update_user(user['id'], {
                'Active Lesson ID': lesson_record_id,
                'Mode': 'lesson_task',
                'Expected': 'lesson_task'
            })
        
        user_sessions[user_id] = {
            'lesson_record_id': lesson_record_id,
            'day': current_day,
            'topic': topic,
            'questions': questions,
            'current_task': 0,
            'answers': [],
            'lang': lang,
            'practice_session_id': practice_session_id
        }
        
        # Truncate theory cleanly at sentence boundary
        theory_clean = theory[:1500] if len(theory) > 1500 else theory
        if len(theory) > 1500:
            last_period = theory_clean.rfind('.')
            if last_period > 800:
                theory_clean = theory_clean[:last_period + 1]
        
        theory_msg = f"📚 Day {current_day}: {topic}\n\n{theory_clean}" if lang == 'en' else f"📚 {current_day}-kun: {topic}\n\n{theory_clean}"
        await update.message.reply_text(theory_msg)
        
        await show_task(update.message, user_id, user_sessions)
        
    except Exception as e:
        print(f"Error generating lesson: {e}")
        await update.message.reply_text(f"Error: {str(e)}")

async def show_task(message, user_id, user_sessions):
    session = user_sessions.get(user_id)
    if not session:
        return
    
    current_task = session['current_task']
    questions = session['questions']
    lang = session.get('lang', 'en')
    
    if current_task >= len(questions):
        from airtable_db import AirtableDB
        db = AirtableDB()
        await complete_lesson(message, user_id, user_sessions, db)
        return
    
    question = questions[current_task]
    task_num = current_task + 1
    
    text = f"✍️ Task {task_num}/5:\n\n{question['text']}\n\nA) {question['options'][0]}\nB) {question['options'][1]}\nC) {question['options'][2]}\nD) {question['options'][3]}"
    keyboard = [[InlineKeyboardButton(opt, callback_data=f"task_ans_{opt}_{user_id}")] for opt in ['A', 'B', 'C', 'D']]
    await message.reply_text(text, reply_markup=InlineKeyboardMarkup(keyboard))

async def handle_task_answer(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_sessions = context.bot_data['user_sessions']
    query = update.callback_query
    
    try:
        await query.answer()
    except Exception:
        pass  # Ignore expired queries
    
    parts = query.data.split('_')
    answer = parts[2]
    user_id = int(parts[3])
    
    session = user_sessions.get(user_id)
    if not session:
        return
    
    current_task = session['current_task']
    question = session['questions'][current_task]
    
    # Disable buttons by editing message
    task_num = current_task + 1
    text = f"✍️ Task {task_num}/5:\n\n{question['text']}\n\nA) {question['options'][0]}\nB) {question['options'][1]}\nC) {question['options'][2]}\nD) {question['options'][3]}\n\n✅ Your answer: {answer}"
    try:
        await query.edit_message_text(text)
    except:
        pass
    is_correct = answer == question['correct']
    
    # Detailed feedback with solution steps for wrong answers
    ai_feedback = ""
    if not is_correct:
        correct_option = question['options'][ord(question['correct']) - ord('A')]
        if session.get('lang') == 'uz':
            ai_feedback = f"To'g'ri javob: {question['correct']}) {correct_option}\n\n📝 Yechim qadamlari:\n1. Masalani diqqat bilan o'qing\n2. Ma'lum va noma'lum qiymatlarni aniqlang\n3. Tegishli formulani qo'llang\n4. Hisoblashlarni bosqichma-bosqich bajaring\n5. Javobni tekshiring\n\n💡 Maslahat: Har bir qadamni yozib boring va formulalarni to'g'ri qo'llang."
        else:
            ai_feedback = f"Correct answer: {question['correct']}) {correct_option}\n\n📝 Solution steps:\n1. Read the problem carefully\n2. Identify known and unknown values\n3. Apply the appropriate formula\n4. Calculate step-by-step\n5. Verify your answer\n\n💡 Tip: Write down each step and apply formulas correctly."
    
    session['answers'].append({
        'answer': answer,
        'correct': question['correct'],
        'is_correct': is_correct,
        'question': question['text']
    })
    
    # Update Quizzes table
    practice_session_id = session.get('practice_session_id', f"quiz_{user_id}_{session['day']}")
    quiz_id = f"{practice_session_id}_q{current_task + 1}"
    is_last = (current_task + 1) >= len(session['questions'])
    db.update_quiz_answer(quiz_id, answer, 1 if is_correct else 0, ai_feedback, is_last)
    
    task_num = current_task + 1
    task_field = f"Task {task_num} Answer"
    
    record_id = session.get('lesson_record_id')
    if record_id:
        update_data = {
            "fields": {
                task_field: answer,
                "Current Task Index": str(task_num + 1),
                "Expected Task": f"task_{task_num + 1}"
            }
        }
        
        requests.patch(
            f"https://api.airtable.com/v0/{db.base_id}/tblInFtIh5fZt59g4/{record_id}",
            headers=db.headers,
            json=update_data
        )
    
    if is_correct:
        feedback = "✅ Correct!" if session.get('lang') == 'en' else "✅ To'g'ri!"
        await query.message.reply_text(feedback)
    else:
        feedback = f"❌ Wrong. Correct: {question['correct']}\n\n💡 {ai_feedback}" if session.get('lang') == 'en' else f"❌ Noto'g'ri. To'g'ri javob: {question['correct']}\n\n💡 {ai_feedback}"
        await query.message.reply_text(feedback)
    
    session['current_task'] += 1
    
    # Check if this was the last task
    if session['current_task'] >= len(session['questions']):
        await asyncio.sleep(0.5)
        from airtable_db import AirtableDB
        db = AirtableDB()
        await complete_lesson(query.message, user_id, user_sessions, db)
    else:
        await asyncio.sleep(0.5)
        await show_task(query.message, user_id, user_sessions)

async def complete_lesson(message, user_id, user_sessions, db):
    session = user_sessions.get(user_id)
    if not session:
        return
    
    # Don't pop session yet if it's not extra practice
    is_extra = session.get('is_extra_practice', False)
    
    answers = session['answers']
    correct = sum(1 for a in answers if a['is_correct'])
    total = len(answers)
    score = (correct / total) * 100
    lang = session.get('lang', 'en')
    
    from ai_content import AIContentGenerator
    ai = AIContentGenerator()
    
    # Generate simple, structured feedback
    if score >= 80:
        if lang == 'uz':
            ai_feedback = f"Ajoyib natija! {session['topic']} mavzusini yaxshi o'zlashtirdingiz. Davom eting!"
        else:
            ai_feedback = f"Excellent work! You've mastered {session['topic']}. Keep it up!"
    elif score >= 60:
        if lang == 'uz':
            ai_feedback = f"Yaxshi! {session['topic']} bo'yicha yaxshi bilim ko'rsatdingiz. Yana mashq qiling."
        else:
            ai_feedback = f"Good job! You're making progress on {session['topic']}. Practice more."
    else:
        if lang == 'uz':
            ai_feedback = f"{session['topic']} mavzusini qayta ko'rib chiqing. Mashq qilish muhim!"
        else:
            ai_feedback = f"Review {session['topic']} again. Practice makes perfect!"
    
    record_id = session.get('lesson_record_id')
    if record_id:
        update_data = {
            "fields": {
                "Lesson Status": "Completed",
                "Lesson Score": str(correct),
                "AI Feedback (Per Task)": ai_feedback,
                "Lesson End Time": datetime.now().isoformat()
            }
        }
        
        requests.patch(
            f"https://api.airtable.com/v0/{db.base_id}/tblInFtIh5fZt59g4/{record_id}",
            headers=db.headers,
            json=update_data
        )
    
    # Complete quiz session for practice questions
    if 'practice_session_id' in session:
        db.complete_quiz_session(session['practice_session_id'], score)
    
    # Only update lesson completion, NOT day progression (that happens when user clicks Next Day)
    if not is_extra:
        user = db.get_user(user_id)
        if user:
            lessons_completed = int(user.get('fields', {}).get('Lessons Completed', '0') or 0) + 1
            
            update_fields = {
                'Lessons Completed': str(lessons_completed),
                'Active Lesson ID': '',
                'Mode': 'idle',
                'Expected': 'none',
                'Last Active': datetime.now().isoformat()
            }
            
            db.update_user(user['id'], update_fields)
    
    # Build result message with length check
    if lang == 'en':
        result_msg = f"🎉 Day {session['day']} completed!\n\n📊 Score: {correct}/{total} ({score:.0f}%)\n\n💬 {ai_feedback}"
    else:
        result_msg = f"🎉 {session['day']}-kun yakunlandi!\n\n📊 Ball: {correct}/{total} ({score:.0f}%)\n\n💬 {ai_feedback}"
    
    # Ensure message isn't too long for Telegram (4096 char limit)
    if len(result_msg) > 4000:
        result_msg = result_msg[:4000] + "..."
    
    print(f"DEBUG: is_extra={is_extra}, score={score}, correct={correct}, total={total}")
    
    if is_extra:
        # For extra practice, just show results and clear session
        await message.reply_text(result_msg)
        user_sessions.pop(user_id, None)
        return
    
    # Main lesson - show buttons
    print(f"DEBUG: Main lesson. Score={score}")
    
    # Check if score is too low (< 30%) - MANDATORY retry
    if score < 30:
        print("DEBUG: Score < 30% - Mandatory retry")
        if lang == 'en':
                retry_msg = "\n\n⚠️ Your score is below 30%. You must practice more before moving to the next day.\n\nMinimum required: 50%"
            else:
                retry_msg = "\n\n⚠️ Sizning balingiz 30% dan past. Keyingi kunga o'tishdan oldin ko'proq mashq qilishingiz kerak.\n\nMinimal talab: 50%"
            
            result_msg += retry_msg
            
            # Only show More Practice button (force retry)
            more_btn = "📝 More Practice (Required)" if lang == 'en' else "📝 Ko'proq mashq (Majburiy)"
            keyboard = [[InlineKeyboardButton(more_btn, callback_data=f"more_practice_{user_id}")]]
            
            await message.reply_text(result_msg, reply_markup=InlineKeyboardMarkup(keyboard))
        
        # Check if score is low (30-49%) - Strongly recommend retry
        elif score < 50:
            print("DEBUG: Score 30-49% - Strongly recommended")
            if lang == 'en':
                warning_msg = "\n\n📊 Your score is below 50%. We strongly recommend more practice before moving forward."
            else:
                warning_msg = "\n\n📊 Sizning balingiz 50% dan past. Oldinga o'tishdan oldin ko'proq mashq qilishni tavsiya qilamiz."
            
            result_msg += warning_msg
            
            # Show all 3 options but emphasize practice
            more_btn = "📝 More Practice (Recommended)" if lang == 'en' else "📝 Ko'proq mashq (Tavsiya)"
            next_btn = "➡️ Next Day" if lang == 'en' else "➡️ Keyingi kun"
            reminder_btn = "⏰ Wait for Reminder" if lang == 'en' else "⏰ Eslatma kutish"
            
            keyboard = [
                [InlineKeyboardButton(more_btn, callback_data=f"more_practice_{user_id}")],
                [InlineKeyboardButton(next_btn, callback_data=f"next_day_{user_id}")],
                [InlineKeyboardButton(reminder_btn, callback_data=f"wait_reminder_{user_id}")]
            ]
            
            await message.reply_text(result_msg, reply_markup=InlineKeyboardMarkup(keyboard))
        
        else:
            # Score >= 50% - All options available
            print("DEBUG: Score >= 50% - All options available")
            more_btn = "📝 More Practice" if lang == 'en' else "📝 Ko'proq mashq"
            next_btn = "➡️ Next Day" if lang == 'en' else "➡️ Keyingi kun"
            reminder_btn = "⏰ Wait for Reminder" if lang == 'en' else "⏰ Eslatma kutish"
            
            keyboard = [
                [InlineKeyboardButton(more_btn, callback_data=f"more_practice_{user_id}")],
                [InlineKeyboardButton(next_btn, callback_data=f"next_day_{user_id}")],
                [InlineKeyboardButton(reminder_btn, callback_data=f"wait_reminder_{user_id}")]
            ]
            
        print(f"DEBUG: Created keyboard with {len(keyboard)} rows")
        await message.reply_text(result_msg, reply_markup=InlineKeyboardMarkup(keyboard))
        print("DEBUG: Message with buttons sent")

async def daily_lesson_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    
    # Create a modified update object with message from callback query
    class CallbackUpdate:
        def __init__(self, query_update):
            self.callback_query = query_update.callback_query
            self.message = query_update.callback_query.message
            self.effective_user = query_update.effective_user
            self.effective_chat = query_update.effective_chat
    
    modified_update = CallbackUpdate(update)
    await daily_lesson_command(modified_update, context)


async def handle_more_practice(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_sessions = context.bot_data['user_sessions']
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    user = db.get_user(user_id)
    
    if not user:
        return
    
    user_data = user.get('fields', {})
    current_day = int(user_data.get('Current Day', '1'))
    lang = user_data.get('Language', 'en')
    weak_topics = user_data.get('Weak Topics', '').split(', ') if user_data.get('Weak Topics') else []
    
    all_topics = weak_topics + ['Algebra', 'Geometry', 'Functions', 'Trigonometry', 'Logarithms', 'Equations', 'Inequalities', 'Sequences', 'Probability', 'Statistics', 'Derivatives', 'Integrals', 'Vectors', 'Complex Numbers']
    topic = all_topics[current_day - 2] if current_day > 1 else all_topics[0]
    
    msg = "⏳ Generating more practice questions..." if lang == 'en' else "⏳ Ko'proq savollar tayyorlanmoqda..."
    await query.message.reply_text(msg)
    
    from ai_content import AIContentGenerator
    ai = AIContentGenerator()
    
    try:
        questions = ai.generate_practice_questions(topic, lang, count=5)
        
        if not questions or len(questions) < 5:
            await query.message.reply_text("Error generating questions. Please try again.")
            return
        
        practice_session_id = db.create_quiz_session(user_id, questions, lesson_day=current_day-1)
        
        user_sessions[user_id] = {
            'day': current_day - 1,
            'topic': topic,
            'questions': questions,
            'current_task': 0,
            'answers': [],
            'lang': lang,
            'practice_session_id': practice_session_id,
            'is_extra_practice': True
        }
        
        await show_task(query.message, user_id, user_sessions)
        
    except Exception as e:
        print(f"Error generating practice: {e}")
        await query.message.reply_text(f"Error: {str(e)}")

async def handle_next_day(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_sessions = context.bot_data['user_sessions']
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    user_sessions.pop(user_id, None)
    
    user = db.get_user(user_id)
    if user:
        lang = user.get('fields', {}).get('Language', 'en')
        current_day = int(user.get('fields', {}).get('Current Day', '1'))
        next_day = current_day + 1
        
        # NOW update the day progression
        update_fields = {
            'Current Day': str(next_day),
            'Last Active': datetime.now().isoformat()
        }
        
        # Mark as completed if finished 14 days
        if next_day > 14:
            update_fields['Learning Status'] = 'Completed'
        
        db.update_user(user['id'], update_fields)
        
        msg = f"✅ Great! Ready for Day {next_day}?\n\nUse /daily_lesson anytime to start!" if lang == 'en' else f"✅ Ajoyib! {next_day}-kun uchun tayyormisiz?\n\nIstalgan vaqt /daily_lesson buyrug'ini yuboring!"
        await query.message.reply_text(msg)

async def handle_wait_reminder(update: Update, context: ContextTypes.DEFAULT_TYPE):
    db = context.bot_data['db']
    user_sessions = context.bot_data['user_sessions']
    query = update.callback_query
    await query.answer()
    
    user_id = int(query.data.split('_')[2])
    user_sessions.pop(user_id, None)
    
    user = db.get_user(user_id)
    if not user:
        return
    
    user_data = user.get('fields', {})
    lang = user_data.get('Language', 'en')
    reminder_time = user_data.get('Reminder Time', '')
    current_day = int(user_data.get('Current Day', '1'))
    
    if reminder_time:
        # User has reminder set
        if lang == 'en':
            msg = f"✅ Perfect! See you tomorrow at {reminder_time} for Day {current_day}!\n\n💪 Keep up the great work!"
        else:
            msg = f"✅ Ajoyib! Ertaga soat {reminder_time}da {current_day}-kun uchun ko'rishamiz!\n\n💪 Davom eting!"
        await query.message.reply_text(msg)
    else:
        # User doesn't have reminder set - ask them to set one
        if lang == 'en':
            msg = f"⏰ You don't have a daily reminder set yet.\n\nWhat time would you like to receive your daily lesson reminder?\n\nExample: 09:00 or 18:30"
        else:
            msg = f"⏰ Sizda hali kunlik eslatma o'rnatilmagan.\n\nQaysi vaqtda kunlik dars eslatmasini olishni xohlaysiz?\n\nMisol: 09:00 yoki 18:30"
        
        # Update user mode to expect reminder time
        db.update_user(user['id'], {
            'Mode': 'awaiting_reminder_time',
            'Expected': 'reminder_time'
        })
        
        await query.message.reply_text(msg)
